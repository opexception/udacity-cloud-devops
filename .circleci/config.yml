version: 2.1

defaults: &defaults
    docker:
      - image: circleci/node:13.8.0

commands:
  print_pipeline_id:
    description: This prints the CircleCI pipeline ID
    parameters:
      id:
        type: string
    steps:
      - run: echo << parameters.id >>
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID} 

jobs:
  print_hello:
    <<: *defaults
    steps:
      - run: echo hello
          #command: |
          #  echo hello
  print_world:
    <<: *defaults
    steps:
      - run: echo world
          #command: |
          #  echo world
  env-var-test:
    <<: *defaults
    steps:
      - run: echo $my_name
  save_hello_world_output:
    <<: *defaults
    steps:
      - run: echo "hello world" > /tmp/output.txt
          #command: |
          #  echo hello
      - persist_to_workspace:
          root: /tmp/
          paths:
            - output.txt
  print_output_file:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp/
      - run: cat /tmp/output.txt
  say_pipeline_id:
    <<: *defaults
    steps:
      - print_pipeline_id:
          id: << pipeline.id >>
  a_failed_job:
    <<: *defaults
    steps:
      - run: exit 1
      - run: 
          command: echo "Hello ERROR!"
          when: on_fail
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Build infrastructure
          command: |
            aws cloudformation deploy \
            --template-file template.yml \
            --stack-name prod-${CIRCLE_WORKFLOW_ID}
  create_ansible_inventory:
    docker:
      - image: amazon/aws-cli # no tar command here!? WTF? need tar to attach workspace
    steps:
      - checkout
      - run:
          name: create inventory file
          command: |
            echo "[all]" > /tmp/inventory
      - run:
          name: gather aws EC2 ip addresses
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:project,Values=udacity \
            --output text >> /tmp/inventory
      - run:
          name: paste inventory to memstash.io
          command: |
            curl -H "Content-Type: text/plain" \
            -H "token: 650fb8c2-e77f-4649-b51e-269f27ccbefb" \
            --request PUT \
            --data "$(cat /tmp/inventory)" \
            https://api.memstash.io/values/inventory
      # - persist_to_workspace:
      #     root: /tmp/
      #     paths:
      #       - inventory
  run_ansible_playbook:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "60:13:9b:fa:3c:81:15:0a:b8:2a:d4:2a:b6:97:c9:68"
      # - attach_workspace:
      #     at: /tmp/
      - run:
          name: Install CURL
          command: |
              apk add curl
      - run:
          name: retrieve inventory from memstash.io
          command: |
            curl -H "token: 650fb8c2-e77f-4649-b51e-269f27ccbefb" \
            --request GET https://api.memstash.io/values/inventory > /tmp/inventory
      - run:
          name: Install Ansible
          command: |
              apk add --update ansible
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i /tmp/inventory webapp/main-remote.yml
  smoke_test:
    docker:
      - image: amazon/aws-cli # no tar command here!? WTF? need tar to attach workspace
    steps:
      - checkout
      # - attach_workspace:
      #     at: /tmp/
      - run:
          name: retrieve inventory from memstash.io
          command: |
            curl -H "token: 650fb8c2-e77f-4649-b51e-269f27ccbefb" \
            --request GET https://api.memstash.io/values/inventory > /tmp/inventory
      - run:
          name: Check URL
          command: |
            ipaddr=$(tail -1 /tmp/inventory)
            if curl -s --head "http://${ipaddr}:3000" 
            then
              exit 0
            else
              exit 1
            fi
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: |
          aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name "${CIRCLE_WORKFLOW_ID}" \
            --parameter-overrides NAME="${CIRCLE_WORKFLOW_ID}"
      - run: aws s3 sync . s3://"${CIRCLE_WORKFLOW_ID}" --delete
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: |
          aws cloudformation \
          list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
          --no-paginate --output text > /tmp/deployment
      - run:
          name: paste deployment to memstash.io
          command: |
            curl -H "Content-Type: text/plain" \
            -H "token: 650fb8c2-e77f-4649-b51e-269f27ccbefb" \
            --request PUT \
            --data "$(cat /tmp/deployment)" \
            https://api.memstash.io/values/deployment
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: |
          aws cloudformation deploy \
            --template-file cloudformation.yml \
            --stack-name cloudfront \
            --parameter-overrides PipelineID="${CIRCLE_WORKFLOW_ID}"
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: retrieve deployment from memstash.io
          command: |
            curl -H "token: 650fb8c2-e77f-4649-b51e-269f27ccbefb" \
            --request GET https://api.memstash.io/values/deployment > /tmp/deployment
      - run:
          name: Destroy S3 bucket
          command: |
            aws s3 rm "s3://$(cat /tmp/deployment)" --recursive
            aws cloudformation delete-stack --stack-name "$(cat /tmp/deployment)"


workflows:
  # welcome:
    # jobs:
      # - print_hello
      # - print_world:
      #     requires:
      #       - print_hello
      # - env-var-test
      # - save_hello_world_output
      # - print_output_file:
      #     requires:
      #       - save_hello_world_output
      # - say_pipeline_id
      # - a_failed_job
  deploy:
    jobs:
      - create_infrastructure
      - create_ansible_inventory:
          requires:
            - create_infrastructure
      - run_ansible_playbook:
          requires:
            - create_ansible_inventory
      - smoke_test:
          requires:
            - run_ansible_playbook
      - create_and_deploy_front_end
      - promote_to_production
          requires: [create_and_deploy_front_end]
